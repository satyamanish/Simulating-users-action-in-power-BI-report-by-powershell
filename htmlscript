<!DOCTYPE html>



<html lang="en">

<head>

    <style>

        body{

            font-family: 'Segoe UI';            

        }

    </style>

    <meta charset="utf-8" />

    <title></title>

    

    <!--JS libraries-->

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>

    <script src="https://cdn.rawgit.com/Microsoft/PowerBI-JavaScript/master/dist/powerbi.min.js" type="text/javascript"></script>

    

    <!-- user configurable parameters in external JSON files-->

    <script type="text/javascript" src="PBIToken.json"></script>

    <script type="text/javascript" src="PBIReport.json"></script>

    

    <script>

		var startTime = new Date();

        //TODO: provide your PBIE token; it will be valid for 60 min only!

        //1. Install Power BI PowerShell module https://docs.microsoft.com/en-us/powershell/power-bi/overview?view=powerbi-ps

        //2. Login into Power BI with your test identity account credentials using Login-PowerBI command

        //3. Put PBIE token on clipboard: Get-PowerBIAccessToken -AsString | % {$_.replace("Bearer ","").Trim()} | clip

        //4. Paste PBIE token value in JSON file; remove 'Bearer ' from the beginning of the string if present

        //var PBIEtoken = "";

        var PBIEtoken = JSON.parse(accessToken).PBIToken;



        //TODO: replace with your report embed URL in the JSON file

        //Get proper report embed URL using PS: Get-PowerBIReport -Id [report GUID] -WorkspaceId [workspace GUID] | Select -ExpandProperty EmbedUrl | Clip

        //var embedUrl = 'https://app.powerbi.com/reportEmbed?reportId=b14f6f29-c5a0-407a-ae06-5c1ae8642285&groupId=7bbb6481-4081-4b0e-97d8-b5085dbb85f4';

        var embedUrl = reportParameters.reportUrl;

        

        //TODO: replace with the seed filter value for your specific report filter 

        var filterStart = reportParameters.filterStart;

        var filterValue = filterStart; 

        var filterMax = reportParameters.filterMax;

        //var filterTable = reportParameters.filterTable;
		
		var filtersList = Array(0);
		if (reportParameters.filters != undefined)
		{
			var arrFilterCounter = Array(reportParameters.filters.length);
			var filterCombinations = 1;
			for (var i = 0; i < reportParameters.filters.length; i++)
			{
				filterCombinations = filterCombinations * reportParameters.filters[i].filtersList.length;
				arrFilterCounter[i] = 0;
			}
			
			filtersList = Array(filterCombinations);
			for (var i = 0; i < filterCombinations; i++)
			{
				filtersList[i] = {
					slicers: [],
					filters: []
				};
				for (var j = 0; j < reportParameters.filters.length; j++)
				{
					var v = reportParameters.filters[j].filtersList[arrFilterCounter[j]];

					var filter = {
						$schema: "http://powerbi.com/product/schema#basic",
						target: {
							table: reportParameters.filters[j].filterTable,
							column: reportParameters.filters[j].filterColumn
						},
						operator: "In",
						values: (v != null ? (Array.isArray(v) ? v : [v]) : reportParameters.filters[j].filtersList.filter(function(a) { return a != null; })),
						filterType: 1
					};
					
					var slicer = 
					  {
						selector: {
						  $schema: "http://powerbi.com/product/schema#slicerTargetSelector",
						  target: {
							table: reportParameters.filters[j].filterTable,
							column: reportParameters.filters[j].filterColumn
						  } 
						},
						state: {
						  filters: [
							{
							  $schema: "http://powerbi.com/product/schema#basic",
							  target: {
								table: reportParameters.filters[j].filterTable,
								column: reportParameters.filters[j].filterColumn
							  },
							  operator: "In",
							  values: (v != null ? (Array.isArray(v) ? v : [v]) : reportParameters.filters[j].filtersList.filter(function(a) { return a != null; }))
							}
						  ]
						}
					  };
					
					if (reportParameters.filters[j].isSlicer)
						filtersList[i].slicers.push(slicer);
					else
						filtersList[i].filters.push(filter);
						
					
				}
				for (var z = reportParameters.filters.length - 1; z >= 0; z--)
				{
					if (arrFilterCounter[z]+1 < reportParameters.filters[z].filtersList.length)
					{
						arrFilterCounter[z]++;
						z = -1;
					}
					else
					{
						arrFilterCounter[z] = 0;
					}
				}
				


			}
		}
		
		function shuffleArray(array) {
			for (let i = array.length - 1; i > 0; i--) {
				const j = Math.floor(Math.random() * (i + 1));
				[array[i], array[j]] = [array[j], array[i]];
		}
}
		
		var filtersCount = filterMax - filterStart;
		if (filtersList != null)
		{
			filterStart = 0;
			filterMax = filtersList.length;
			filtersCount = filterMax;
			shuffleArray(filtersList);
		}

		var bookmarkList = reportParameters.bookmarkList;
		if (bookmarkList == null || bookmarkList == undefined || bookmarkList == "")
		{
			bookmarkList = [""];
		}

        //var filterColumn = reportParameters.filterColumn;

        var thinkTimeSeconds = reportParameters.thinkTimeSeconds;
		thinkTimeSeconds = (thinkTimeSeconds == null ? 0 : thinkTimeSeconds);
		
		var pageName = reportParameters.pageName;
		pageName = (pageName == undefined ? null : pageName);

		var layoutType = reportParameters.layoutType;
		layoutType = (layoutType == undefined ? "Master" : layoutType);
		
		//var isSlicer = reportParameters.isSlicer;
		//isSlicer = (isSlicer == undefined ? false : isSlicer);


        //TODO: adjust this value in the JSON file based on the complexity of your report; helps free up clogged browser resources

        var sessionRestart = reportParameters.sessionRestart; //NOTE: added to address hard to identify long-running session memory leak



        var reportId = GetQSParam("reportId", embedUrl);

        //preserving total report render count to support session restart flow

        var loadCounter = sessionStorage.getItem('reloadCounter') === null ? 0 : sessionStorage.getItem('reloadCounter');

		startTime = (sessionStorage.getItem('originalStartTime') === null ? startTime : new Date(sessionStorage.getItem('originalStartTime')));



        var errorTracker = "";

       

        var report;

		

        //added by SergeiG 5/4/2018 to embed a report

        function EmbedReport() {



            if(errorTracker.length != 0) return;



            if(report!=undefined) report.off("rendered");


			if (loadCounter > 0)
			{
				var divCounter = document.getElementById('LoadReportCounter');

				var avgDuration = Math.round(((((new Date()) - startTime) - (thinkTimeSeconds*loadCounter*1000)) / loadCounter)) / 1000;
				divCounter.innerHTML = loadCounter
				 + " refreshes<br/>" 
				 + avgDuration + " seconds average refresh time<br/>"
				 + thinkTimeSeconds + " seconds think time";  
			}

            // Get models (models contains enums)

            var models = window['powerbi-client'].models;

			var filterCounter = Math.floor(loadCounter / bookmarkList.length) % filtersCount;
			var bookmarkCounter = loadCounter % bookmarkList.length;
			var bookmarkValue = bookmarkList[bookmarkCounter];
			if (filtersList != null)
			{
				if (isNaN(filterCounter))
				{
					filterValue = {
						slicers: [],
						filters: []
					};
				}
				else
				{
					filterValue = filtersList[filterCounter];
				}
			}
			else if (bookmarkCounter == 0) //only increment the next filter value when we are at the first bookmark
			{
				filterValue = filterValue < filterMax ? ++filterValue : filterStart;            
			}




            //incrementing filter value; restarting if hit numeric filter max

            //TODO: adjust value for your specific filter range

            //filterValue < filterMax ? ++filterValue : filterStart;            



            // Embed configuration is used to describe what and how to embed

            // This object is used when calling powerbi.embed

            // It can also include settings and options such as filters

            // See java script documentation on GitHub for settings value details

            var config = {

                    type: 'report',

                    tokenType: models.TokenType.Aad,

                    accessToken: PBIEtoken,

                    embedUrl: embedUrl,

                    id: reportId,

                    filters: filterValue.filters,
					
					slicers: filterValue.slicers,
					pageName: pageName,
					bookmark: { name: bookmarkValue },

                    settings: {

                        filterPaneEnabled: true,

                        navContentPaneEnabled: true,
						
                        layoutType: models.LayoutType[layoutType]            

                    }

                };




            // Embed the report within the div element    
			var justFlipBookmark = true;
			if (bookmarkCounter == 0 || report == undefined)
			{
				report = powerbi.embed(embedDiv, config);
				justFlipBookmark = false;
			}
			


            //handling report load error

            report.on("error", function (event) {

                var divCounter = document.getElementById('LoadReportCounter');

                var currentTime = new Date().toTimeString();

                divCounter.innerHTML = divCounter.innerHTML

                    + "<br/>[Error at " + currentTime + "] "

                    + event.detail.detailedMessage + " "

                    + event.detail.errorCode;



                report.off("error");

                //setting error tracker to stop the execution

                errorTracker = event.detail.message;

            });           



            report.on("rendered",function() { setTimeout("EmbedReport()",thinkTimeSeconds*1000) });


			if (justFlipBookmark)
			{
				report.bookmarksManager.apply(bookmarkValue);
			}

            //display report URL           

            //var taInfo = document.getElementById('ReportURL');

            //taInfo.value = embedUrl;

            //display PBIE token

            //var divToken = document.getElementById('ADALToken');

            //divToken.value = PBIEtoken;            



            //display counter            

            loadCounter++;


/*
            var divCounter = document.getElementById('LoadReportCounter');

			var avgDuration = Math.round(((((new Date()) - startTime) - (thinkTimeSeconds*(loadCounter-1)*1000)) / loadCounter)) / 1000;
            divCounter.innerHTML = loadCounter
			 + " refreshes<br/>" 
			 + avgDuration + " seconds average refresh time<br/>"
			 + thinkTimeSeconds + " seconds think time";   
			 */


            //NOTE: added 5/25/19 to see if helps address session memory leak issue

            if((loadCounter % sessionRestart) === 0) {

                sessionStorage.setItem('reloadCounter',loadCounter);      
                sessionStorage.setItem('originalStartTime',startTime);      				

                location.reload(false);

            };           

        } 



        //NOTE: can use report.reload() or report.refresh()

               

        //REGION: helper functions

        //NOTE: helper function to extract qs parameter by name

        function GetQSParam (name,url) {

            var results = new RegExp('[\?&]' + name + '=([^&#]*)')

                .exec(url);

            if (results == null) {

                return 0;

            }

            return results[1] || 0;

        }



        //END REGION: helper functions



    </script>



</head>

<body>



    <div id="LoadReportCounter">0</div>

    <!--
	<div id="InfoMessage" style="font-weight:bolder;">Report URL and AAD token:</div>

    <textarea id="ReportURL" wrap="soft" rows="1" readonly style="width:99%;resize:vertical;" visible=0></textarea>

    <textarea id="ADALToken" wrap="soft" rows="3" readonly style="width:99%;resize:vertical;" visible=0></textarea>
	-->

    <hr style="width:99%;" />

    <div id="embedDiv" style="height: 800px; width: 100%; max-width: 1200px;" ></div>



</body>

<script>



    //NOTE: modified 5/20/19 to address browser flooding when running refresh on timer

    //kicking off report refresh loop based on report render event, i.e., not before 

    //full render cycle completion as may be the case with timer

    if(report==undefined) EmbedReport();  



</script>

</html>
